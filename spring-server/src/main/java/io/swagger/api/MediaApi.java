/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.36).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.CreateCommentDTO;
import io.swagger.model.EditFileDTO;
import io.swagger.model.MediaDTO;
import org.springframework.core.io.Resource;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-11-30T07:05:42.446Z[GMT]")
@Validated
public interface MediaApi {

    @Operation(summary = "", description = "", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "media" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Created") })
    @RequestMapping(value = "/media/comment",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> commentFile(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody CreateCommentDTO body);


    @Operation(summary = "Delete an uploaded file (admin only)", description = "", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "media" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "No content") })
    @RequestMapping(value = "/media/{id}/delete",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteFile(@Parameter(in = ParameterIn.PATH, description = "ID of the media file", required=true, schema=@Schema()) @PathVariable("id") Integer id);


    @Operation(summary = "Download a file", description = "", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "media" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "", content = @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = Resource.class))) })
    @RequestMapping(value = "/media/{id}/download",
        produces = { "application/octet-stream" }, 
        method = RequestMethod.GET)
    ResponseEntity<Resource> downloadFile(@Parameter(in = ParameterIn.PATH, description = "ID of the file", required=true, schema=@Schema()) @PathVariable("id") Integer id);


    @Operation(summary = "Get all available files", description = "", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "media" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = MediaDTO.class)))) })
    @RequestMapping(value = "/media",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<MediaDTO>> getFiles();


    @Operation(summary = "Modify an uploaded file's name (admin only)", description = "", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "media" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Ok", content = @Content(mediaType = "application/json", schema = @Schema(implementation = MediaDTO.class))) })
    @RequestMapping(value = "/media/{id}/modify",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<MediaDTO> modifyFile(@Parameter(in = ParameterIn.PATH, description = "ID of the media file", required=true, schema=@Schema()) @PathVariable("id") Integer id, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody EditFileDTO body);


    @Operation(summary = "Search files", description = "", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "media" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = MediaDTO.class)))) })
    @RequestMapping(value = "/media/search",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<MediaDTO>> searchFile(@Parameter(in = ParameterIn.QUERY, description = "Name of the file" ,schema=@Schema()) @Valid @RequestParam(value = "query", required = false) String query);


    @Operation(summary = "Upload a new file", description = "", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "media" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Uploaded file's ID", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))) })
    @RequestMapping(value = "/media/upload",
        produces = { "text/plain" }, 
        consumes = { "multipart/form-data" }, 
        method = RequestMethod.POST)
    ResponseEntity<String> uploadFile(@Parameter(description = "file detail") @Valid @RequestPart("file") MultipartFile file);

}

